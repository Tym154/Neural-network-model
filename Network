#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

vector<vector<vector<double>>> weights = {{{0.3, 0.1, -0.4},{-0.3, 0.1, 0.4}},{{0.6, -0.2},{-0.3, 0.2},{-0.7, 0.4}}}; //Storing the weights
vector<vector<double>> nodeVal = {{0, 0},{0,0,0},{0,0}}; //Storning the node values

//Activation function
double activation(double x){
    return 1 / (1 + exp(-x));
}

//Forward propagation function
void forward_prop(vector<vector<vector<double>>> weights, vector<vector<double>>& nodeVal){
    for(int i = 0; i < weights.size(); i++){
        vector<double> temp(nodeVal[i+1].size(), 0.0);

        for(int j = 0; j < weights[i].size(); j++){
            for(int k = 0; k < weights[i][j].size(); k++){
                temp[k] += weights[i][j][k] * nodeVal[i][j];
            }
        }

        for(int k = 0; k < temp.size(); k++){
            temp[k] = activation(temp[k]);
        }

        nodeVal[i+1] = temp;
    }
}

//Just testing out the functions for now
int main(){
    forward_prop(weights, nodeVal);

    cout << nodeVal[2][0] << "\n";
    cout << nodeVal[2][1] << "\n";

    return 0;
}

